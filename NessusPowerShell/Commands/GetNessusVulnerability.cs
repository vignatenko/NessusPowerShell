using System;
using System.Collections.Generic;
using System.Linq;
using System.Management.Automation;
using System.Threading;
using NessusClient;
using NessusClient.Scans;

namespace NessusPowerShell.Commands
{
    /// <summary>
    /// <para type="synopsis">Returns list of vulnerabilities by Scan ID and its history ID</para>
    /// <para type="description">In order to get list of vulnerabilities the cmdlet does export, download and parse of downloaded file</para>    
    /// </summary>
    /// <example>
    /// <para>Get list of vulnerabilities for last 10 days.</para>
    /// <para>Get-NessusScanHistory | where {$_.LastUpdateDate -GT [DateTimeOffset]::UtcNow.AddDays(-10)} | Get-NessusVulnerability</para>
    /// </example>
    [Cmdlet(VerbsCommon.Get, "NessusVulnerability"), OutputType(typeof(VulnerabilityData), typeof(VulnerabilityDataFull))]
    public class GetNessusVulnerability : NessusCmdletBase
    {
        /// <summary>
        /// <para type="description">Scan ID as it returned by /scans endpoint (or Get-NessusScanHistory cmdlet).</para>
        /// </summary>
        [Parameter(Mandatory = true, ValueFromPipelineByPropertyName = true, HelpMessage = "The Scan Id (returned by Get-NessusScanHistory)")]        
        public int Id { get; set; }

        /// <summary>
        /// <para type="description">History ID as it returned by /scans/:id endpoint (or Get-NessusScanHistory cmdlet).</para>
        /// </summary>
        [Parameter(Mandatory = true, ValueFromPipelineByPropertyName = true, HelpMessage = "The Scan History Id (returned by Get-NessusScanHistory)")]
        public int HistoryId { get; set; }

        /// <summary>
        /// <para type="description">Adds PluginOutput and SeeAlso fields to output.</para>
        /// </summary>
        [Parameter(HelpMessage = "Show more details about vulnerability(Plugin Output and See Also fields)")]
        public SwitchParameter MoreDetails { get; set; }



        protected override void ProcessRecord(INessusConnection nessusConnection, CancellationToken cancellationToken)
        {

            var scanResults = nessusConnection.GetScanResultAsync(Id, HistoryId, cancellationToken).Result;

            var vulns = GetVulnerabilities(scanResults);

            WriteObject(vulns, true);

        }

        private IEnumerable<VulnerabilityData> GetVulnerabilities(ScanResult scanResults)
        {
            return MoreDetails
                ? scanResults.Hosts.SelectMany(
                    host => host.Vulnerabilities.Select(v => ToVulnerabilityDataFull(scanResults.Name, host, v)))
                : scanResults.Hosts.SelectMany(
                    host =>
                        host.Vulnerabilities.Select(
                            v => ToVulnerabilityData<VulnerabilityData>(scanResults.Name, host, v)));
        }

        private static T ToVulnerabilityData<T>(string scanName, Host host, Vulnerability v) where T: VulnerabilityData, new()
        {
            return new T
                {
                ScanName = scanName,
                    PluginId = v.Plugin.Id,
                    PluginName = v.Plugin.Name,
                    Host = GetDisplayHostName(host),
                    Port = v.Port,
                    Protocol = v.Protocol,
                    Severity = v.Severity,
                    LastSeenDate = host.EndScanTime
                };
        }
        private static VulnerabilityDataFull ToVulnerabilityDataFull(string scanName, Host host, Vulnerability v)
        {
            var res = ToVulnerabilityData<VulnerabilityDataFull>(scanName, host, v);
            res.PluginOutput = v.PluginOutput;
            res.SeeAlso = v.SeeAlso;
            return res;
        }

        private static string GetDisplayHostName(Host host)
        {
              return host.HostName == host.IpAddress && host.HostName == host.Dns
                ? host.NetbiosName ?? host.IpAddress
                : host.Dns ?? host.NetbiosName ?? host.HostName;
    }
        class VulnerabilityData
        {
            public string ScanName { get; set; }
            public string PluginId { get; set; }
            public string PluginName { get; set; }
            public string Host { get; set; }
            public int Port { get; set; }
            public string Protocol { get; set; }
            public string Severity { get; set; }
            public DateTimeOffset LastSeenDate { get; set; }
        }



        class VulnerabilityDataFull : VulnerabilityData
        {
            public string PluginOutput { get; set; }
            public string SeeAlso { get; set; }

        }
    }

}